{"version":3,"sources":["jquery.js"],"names":["window","jQuery","selectorOrArray","elements","document","querySelectorAll","Array","addClass","className","i","length","classList","add","find","selector","array","concat","from","oldApi","end","each","fn","call","parent","node","indexOf","parentNode","push","print","console","log","children"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,OAAOC,MAAP,GAAgB,UAAUC,eAAV,EAA2B;AACvC,QAAIC,iBAAJ;AACA,QAAI,OAAOD,eAAP,KAA2B,QAA/B,EAAyC;AACrCC,mBAAWC,SAASC,gBAAT,CAA0BH,eAA1B,CAAX;AACH,KAFD,MAEO,IAAIA,2BAA2BI,KAA/B,EAAsC;AACzCH,mBAAWD,eAAX;AACH;AACD;AACA,WAAO;AACH;AACAK,gBAFG,oBAEMC,SAFN,EAEiB;AAChB,iBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIN,SAASO,MAA7B,EAAqCD,GAArC,EAA0C;AACtCN,yBAASM,CAAT,EAAYE,SAAZ,CAAsBC,GAAtB,CAA0BJ,SAA1B;AACH;AACD,mBAAO,IAAP;AACH,SAPE;AAQHK,YARG,gBAQEC,QARF,EAQY;AACX,gBAAIC,QAAQ,EAAZ;AACA,iBAAK,IAAIN,IAAI,CAAb,EAAgBA,IAAIN,SAASO,MAA7B,EAAqCD,GAArC,EAA0C;AACtC;AACA;AACAM,wBAAQA,MAAMC,MAAN,CAAaV,MAAMW,IAAN,CAAWd,SAASM,CAAT,EAAYJ,gBAAZ,CAA6BS,QAA7B,CAAX,CAAb,CAAR;AACH;AACD;AACA;AACA;AACAC,kBAAMG,MAAN,GAAe,IAAf,CAVW,CAUU;AACrB,mBAAOjB,OAAOc,KAAP,CAAP;AACH,SApBE;;AAqBHG,gBAAQhB,gBAAgBgB,MArBrB;AAsBHC,WAtBG,iBAsBG;AACF,mBAAO,KAAKD,MAAZ;AACH,SAxBE;AAyBHE,YAzBG,gBAyBEC,EAzBF,EAyBM;AACL,iBAAK,IAAIZ,IAAI,CAAb,EAAgBA,IAAIN,SAASO,MAA7B,EAAqCD,GAArC,EAA0C;AACtCY,mBAAGC,IAAH,CAAQ,IAAR,EAAcnB,SAASM,CAAT,CAAd,EAA2BA,CAA3B;AACH;AACD,mBAAO,IAAP;AACH,SA9BE;AA+BHc,cA/BG,oBA+BM;AACL,gBAAMR,QAAQ,EAAd;AACA,iBAAKK,IAAL,CAAU,UAACI,IAAD,EAAU;AAChB,oBAAIT,MAAMU,OAAN,CAAcD,KAAKE,UAAnB,MAAmC,CAAC,CAAxC,EAA2C;AACvCX,0BAAMY,IAAN,CAAWH,KAAKE,UAAhB;AACH;AACJ,aAJD;AAKA,mBAAOzB,OAAOc,KAAP,CAAP;AACH,SAvCE;AAwCHa,aAxCG,mBAwCK;AACJC,oBAAQC,GAAR,CAAY3B,QAAZ;AACH,SA1CE;AA2CH4B,gBA3CG,sBA2CQ;AACP,gBAAMhB,QAAQ,EAAd;AACA,iBAAKK,IAAL,CAAU,UAACI,IAAD,EAAU;AAChBT,sBAAMY,IAAN,iCAAcH,KAAKO,QAAnB,GADgB,CACc;AAC9B;AACH,aAHD;AAIA,mBAAO9B,OAAOc,KAAP,CAAP;AACH;AAlDE,KAAP;AAoDH,CA5DD;;AA8DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"jquery.799d62b4.map","sourceRoot":"..\\src","sourcesContent":["window.jQuery = function (selectorOrArray) {\n    let elements;\n    if (typeof selectorOrArray === 'string') {\n        elements = document.querySelectorAll(selectorOrArray);\n    } else if (selectorOrArray instanceof Array) {\n        elements = selectorOrArray;\n    }\n    // api 可以操作 elements\n    return {\n        // 闭包： 函数访问外部变量\n        addClass(className) {\n            for (let i = 0; i < elements.length; i++) {\n                elements[i].classList.add(className);\n            }\n            return this;\n        },\n        find(selector) {\n            let array = [];\n            for (let i = 0; i < elements.length; i++) {\n                // const elements2 = Array.from(elements[i].querySelectorAll(selector));\n                // array = array.concat(elements2);\n                array = array.concat(Array.from(elements[i].querySelectorAll(selector)));\n            }\n            // return this; 有个小 bug，不能返回 this\n            // const newApi = jQuery(array);\n            // return newApi;\n            array.oldApi = this; // this 是旧的 api\n            return jQuery(array);\n        },\n        oldApi: selectorOrArray.oldApi,\n        end() {\n            return this.oldApi;\n        },\n        each(fn) {\n            for (let i = 0; i < elements.length; i++) {\n                fn.call(null, elements[i], i);\n            }\n            return this;\n        },\n        parent() {\n            const array = []\n            this.each((node) => {\n                if (array.indexOf(node.parentNode) === -1) {\n                    array.push(node.parentNode);\n                }\n            })\n            return jQuery(array);\n        },\n        print() {\n            console.log(elements);\n        },\n        children() {\n            const array = [];\n            this.each((node) => {\n                array.push(...node.children); // 展开操作符\n                // array.push(node.children[0], node.children[1], node.children[2]);\n            })\n            return jQuery(array);\n        }\n    }\n}\n\n// addClass 实现过程 1\n// window.jQuery = function (selector) {\n//     const elements = document.querySelector(selector);\n//     const api = {\n//         // \"addClass\": function () {\n//         //     console.log(elements);\n//         // }\n//         addClass() {\n//             console.log(elements)\n//         }\n//     }\n//     return api;\n// }\n\n// addClass 实现过程 2\n// window.jQuery = function (selector) {\n//     const elements = document.querySelectorAll(selector);\n//     // api 可以操作 elements\n//     const api = {\n//         // 闭包： 函数访问外部变量\n//         addClass: function(className) {\n//             for (let i = 0; i < elements.length; i++) {\n//                 const element = elements[i];\n//                 element.classList.add(className);\n//             }\n//             return undefined;\n//         }\n//     }\n//     return api;\n// }\n\n// addClass 实现过程 3\n// window.jQuery = function (selector) {\n//     const elements = document.querySelectorAll(selector);\n//     // api 可以操作 elements\n//     const api = {\n//         // 闭包： 函数访问外部变量\n//         addClass(className) {\n//             for (let i = 0; i < elements.length; i++) {\n//                 elements[i].classList.add(className);\n//             }\n//             return api;\n//         }\n//     }\n//     return api;\n// }\n\n// addClass 实现过程 4\n// window.jQuery = function (selector) {\n//     const elements = document.querySelectorAll(selector);\n//     // api 可以操作 elements\n//     const api = {\n//         // 闭包： 函数访问外部变量\n//         addClass(className) {\n//             for (let i = 0; i < elements.length; i++) {\n//                 elements[i].classList.add(className);\n//             }\n//             return this; // this 就是 api\n//         }\n//     }\n//     return api;\n// }"]}