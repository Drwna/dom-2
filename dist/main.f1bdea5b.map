{"version":3,"sources":["main.js"],"names":["jQuery","children","print"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AAIA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;;;AAGA;AACAA,OAAO,OAAP,EAAgBC,QAAhB,GAA2BC,KAA3B","file":"main.f1bdea5b.map","sourceRoot":"..\\src","sourcesContent":["// addClass\n// jQuery('.test').addClass('red').addClass('blue');\n\n// const api = jQuery('.test'); // 不返回元素门，返回 api 对象\n// api.addClass('red') // this 就是 api\n//     .addClass('blue')\n//     .addClass('black'); // 链式操作\n\n// obj.fn(p1); // 函数里的 this 就是 obj\n// obj.fn.call(obj, p1)\n\n\n\n// find\n// const api1 = jQuery('.test');\n// api1.addClass('blue');\n\n// const api2 = api1.find('.child').addClass('red');\n\n// api1.addClass('green');\n// api1 添加 blue 类后，再给 test 类下的 child 类 添加一个 red 类\n// 之后再重新用 api1 添加 green 类，这个 green 类会添加在 child 类后边\n// 重新构造函数实现\n// jQuery('.test').find('.child').addClass('red').addClass('green');\n\n\n// end\n// jQuery('.test')\n//     .find('.child')\n//     .addClass('red')\n//     .addClass('greed')\n//     .end() // 回到上一层，在 test 上添加 yellow\n//     .addClass('yellow')\n\n\n// each\n// const x = jQuery('.test')\n//     .find('.child')\n\n// x.each((e) => console.log(e))\n\n\n// parent\n// const x = jQuery('.test')\n// x.parent().print()\n\n\n// children\njQuery('.test').children().print();"]}